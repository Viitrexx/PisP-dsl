// Auto-generated by PisP.gen.code2solver.Cpp
#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

bool q[6] = {1,1,1,1,1,1,};
int i = 0;

void Sinfty() {
  i++;
  //cout << "\r" << i;
}
void S5() {
  if (!q[5]) {
    Sinfty();
  }
}
void S4() {
  if (!q[4]) {
    S5();
  }
}
void S3() {
  if (!q[3]) {
    S4();
  }
  if (q[3]) {
    q[3] = false;
    if (q[4]) {
      q[4] = false;
      S4();
      q[4] = true;
    }
    q[3] = true;
  }
}
void S2() {
  if (!q[2]) {
    S3();
  }
  if (q[2]) {
    q[2] = false;
    if (q[4]) {
      q[4] = false;
      S3();
      q[4] = true;
    }
    q[2] = true;
  }
}
void S1() {
  if (!q[1]) {
    S2();
  }
  if (q[1]) {
    q[1] = false;
    if (q[2]) {
      q[2] = false;
      if (q[3]) {
        q[3] = false;
        if (q[5]) {
          q[5] = false;
          S2();
          q[5] = true;
        }
        q[3] = true;
      }
      q[2] = true;
    }
    q[1] = true;
  }
  if (q[1]) {
    q[1] = false;
    if (q[4]) {
      q[4] = false;
      S2();
      q[4] = true;
    }
    q[1] = true;
  }
}
void S0() {
  if (!q[0]) {
    S1();
  }
  if (q[0]) {
    q[0] = false;
    if (q[1]) {
      q[1] = false;
      if (q[2]) {
        q[2] = false;
        if (q[5]) {
          q[5] = false;
          S1();
          q[5] = true;
        }
        q[2] = true;
      }
      q[1] = true;
    }
    q[0] = true;
  }
  if (q[0]) {
    q[0] = false;
    if (q[1]) {
      q[1] = false;
      if (q[3]) {
        q[3] = false;
        if (q[5]) {
          q[5] = false;
          S1();
          q[5] = true;
        }
        q[3] = true;
      }
      q[1] = true;
    }
    q[0] = true;
  }
  if (q[0]) {
    q[0] = false;
    if (q[2]) {
      q[2] = false;
      if (q[3]) {
        q[3] = false;
        if (q[5]) {
          q[5] = false;
          S1();
          q[5] = true;
        }
        q[3] = true;
      }
      q[2] = true;
    }
    q[0] = true;
  }
  if (q[0]) {
    q[0] = false;
    if (q[4]) {
      q[4] = false;
      S1();
      q[4] = true;
    }
    q[0] = true;
  }
}

int main() {
  cout << "Solving My Easy Test Puzzle..." << endl;
  /* q = A */
  auto start = high_resolution_clock::now();
  S0(); /* start solver */
  auto stop = high_resolution_clock::now();
  auto duration = duration_cast<microseconds>(stop - start);
  cout << "Found " << i << " solutions in " << duration.count()/1000000.0f << " seconds.";
  return 0;
}
