package PisP.inout.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import javax.xml.parsers.SAXParserFactory;
import javax.xml.parsers.SAXParser;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.ModelImports;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.logging.rt.LogContext;
import org.jetbrains.mps.openapi.language.SProperty;

public class Import_Puzzle_Action extends BaseAction {
  private static final Icon ICON = null;

  public Import_Puzzle_Action() {
    super("Import Puzzle from XML", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.NONE);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModel model = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (model == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    // Choose file
    JFrame frame = new JFrame();
    frame.setVisible(false);
    JFileChooser jfc = new JFileChooser();
    jfc.setDialogTitle("Choose file to import.");
    FileNameExtensionFilter filter = new FileNameExtensionFilter("XML", "xml");
    jfc.setFileFilter(filter);
    int userSelection = jfc.showOpenDialog(frame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      File f = jfc.getSelectedFile();
      // Parse
      SAXParserFactory spf = SAXParserFactory.newInstance();
      try {
        SAXParser parser = spf.newSAXParser();
        final puzzleHandler handler = new puzzleHandler();
        parser.parse(f, handler);

        // Get models/nodes/whatever
        event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(() -> {
          SModel new_model = event.getData(MPSCommonDataKeys.CONTEXT_MODEL).getModelRoot().createModel(SModelOperations.getModelName(event.getData(MPSCommonDataKeys.CONTEXT_MODEL)) + "." + SPropertyOperations.getString(handler.getPuzzle(), PROPS.name$MnvL).replace(" ", "_"));
          new ModelImports(new_model).addUsedLanguage(MetaAdapterFactory.getLanguage(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, "PisP"));
          new ModelImports(new_model).copyLanguageEngagedOnGeneration(event.getData(MPSCommonDataKeys.CONTEXT_MODEL));
          SModelOperations.addRootNode(new_model, handler.getPuzzle());
          SModelOperations.addRootNode(new_model, handler.getShape());
          for (SNode piece : ListSequence.fromList(handler.getPieces())) {
            SModelOperations.addRootNode(new_model, piece);
          }
          SModelOperations.addRootNode(new_model, handler.getBagOfPieces());
        });
      } catch (Exception e) {
        LogContext.with(Import_Puzzle_Action.class, null, null).error(e);
      }
    }
    frame.dispose();
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
