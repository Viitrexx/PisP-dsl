package PisP.inout.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.text.TextGeneratorEngine;
import jetbrains.mps.messages.IMessageHandler;
import jetbrains.mps.messages.IMessage;
import jetbrains.mps.baseLanguage.logging.rt.LogContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class Export_Puzzle_Action extends BaseAction {
  private static final Icon ICON = null;

  public Export_Puzzle_Action() {
    super("Export Puzzle to XML", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.NONE);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    if (SNodeOperations.isInstanceOf(event.getData(MPSCommonDataKeys.NODE), CONCEPTS.Puzzle$V)) {
      final SNode xml = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b10b2L, "jetbrains.mps.core.xml.structure.XmlElement"));
      event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(() -> Export_Puzzle_Action.this.dumpStructure(event.getData(MPSCommonDataKeys.NODE), xml, event));
      // xml.children.first now has internal xml language AST of puzzle
      TextGeneratorEngine tge = new TextGeneratorEngine(new IMessageHandler() {
        @Override
        public void handle(IMessage p1) {
          LogContext.with(Export_Puzzle_Action.class, null, null).info(p1.getSender() + ": " + p1.getText());
        }
      });
      String output = tge.generateText(ListSequence.fromList(SNodeOperations.getChildren(xml)).first());
      Export_Puzzle_Action.this.writeToFile(output, event);
    }
  }
  private void writeToFile(String s, final AnActionEvent event) {
    JFrame frame = new JFrame();
    frame.setVisible(false);
    JFileChooser jfc = new JFileChooser();
    FileNameExtensionFilter filter = new FileNameExtensionFilter("XML", "xml");
    jfc.setFileFilter(filter);
    jfc.setDialogTitle("Choose save location.");
    final Wrappers._T<String> puzzleName = new Wrappers._T<String>();
    event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(() -> {
      SNode puzzle = (SNode) event.getData(MPSCommonDataKeys.NODE);
      for (char c : SPropertyOperations.getString(puzzle, PROPS.name$MnvL).toCharArray()) {
        if (c != '/' && c != '\\' && c != ':' && c != '?' && c != '<' && c != '>' && c != '|') {
          puzzleName.value += c;
        }
      }

    });
    jfc.setSelectedFile(new File(puzzleName.value + ".xml"));
    int userSelection = jfc.showSaveDialog(frame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      File selectedFile = jfc.getSelectedFile();
      try {
        FileWriter fw = new FileWriter(selectedFile);
        fw.write(s);
        fw.close();
      } catch (IOException ioe) {
        LogContext.with(Export_Puzzle_Action.class, null, null).error(ioe);
      }
    }
    frame.dispose();
  }
  public void dumpStructure(SNode mpsNode, SNode parent, final AnActionEvent event) {
    SNode e = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b10b2L, "jetbrains.mps.core.xml.structure.XmlElement"));
    SPropertyOperations.assign(e, PROPS.tagName$ZoHR, SNodeOperations.getConcept(mpsNode).getName());
    for (SProperty property : mpsNode.getProperties()) {
      SNode att = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b8df3L, "jetbrains.mps.core.xml.structure.XmlAttribute"));
      SPropertyOperations.assign(att, PROPS.attrName$omjx, property.getName());
      SNode val = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54cfd1fL, "jetbrains.mps.core.xml.structure.XmlTextValue"));
      SPropertyOperations.assign(val, PROPS.text$_LaO, mpsNode.getProperty(property).toString());
      ListSequence.fromList(SLinkOperations.getChildren(att, LINKS.value$1h4D)).addElement(val);
      ListSequence.fromList(SLinkOperations.getChildren(e, LINKS.attributes$ZouQ)).addElement(att);
    }

    for (SNode child : SNodeOperations.getChildren(mpsNode)) {
      Export_Puzzle_Action.this.dumpStructure(child, e, event);
    }

    for (SReference reference : SNodeOperations.getReferences(mpsNode)) {
      Export_Puzzle_Action.this.dumpStructure(reference.getTargetNode(), e, event);
    }
    ListSequence.fromList(SLinkOperations.getChildren(parent, LINKS.content$zkQy)).addElement(e);
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Puzzle$V = MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL, "PisP.structure.Puzzle");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty tagName$ZoHR = MetaAdapterFactory.getProperty(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b10b2L, 0x5c842a42c54b10b6L, "tagName");
    /*package*/ static final SProperty attrName$omjx = MetaAdapterFactory.getProperty(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b8df3L, 0x5c842a42c54b8df6L, "attrName");
    /*package*/ static final SProperty text$_LaO = MetaAdapterFactory.getProperty(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54cfd1fL, 0x5c842a42c54cfd20L, "text");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink value$1h4D = MetaAdapterFactory.getContainmentLink(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b8df3L, 0x5c842a42c54cfd1eL, "value");
    /*package*/ static final SContainmentLink attributes$ZouQ = MetaAdapterFactory.getContainmentLink(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b10b2L, 0x5c842a42c54b10b5L, "attributes");
    /*package*/ static final SContainmentLink content$zkQy = MetaAdapterFactory.getContainmentLink(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b10b2L, 0x16838b3fce9a4922L, "content");
  }
}
