package PisP.inout.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.workbench.action.ActionAccess;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.logging.rt.LogContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import javax.swing.JFrame;
import javax.swing.JFileChooser;
import java.io.File;
import java.util.Scanner;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.ModelImports;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SEnumOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import java.io.IOException;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class Import_Legacy_Action extends BaseAction {
  private static final Icon ICON = null;

  public Import_Legacy_Action() {
    super("Import legacy puzzle", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setActionAccess(ActionAccess.NONE);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModel model = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      if (model == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    LogContext.with(Import_Legacy_Action.class, null, null).info("Importing legacy");
    final SNode puzzle = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL, "PisP.structure.Puzzle"));
    final SNode bop = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L, "PisP.structure.BagOfPieces"));
    final SNode shape = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L, "PisP.structure.Shape"));
    final Wrappers._T<SModel> new_model = new Wrappers._T<SModel>();
    SLinkOperations.setTarget(puzzle, LINKS.shape$f2Vs, shape);
    SLinkOperations.setTarget(puzzle, LINKS.bagofpieces$Ua4q, bop);
    JFrame frame = new JFrame();
    frame.setVisible(false);
    JFileChooser jfc = new JFileChooser("C:\\Users\\s162254\\Documents\\MCS\\Y2\\proj\\prep\\pascal\\Pieces-in-Shape Puzzles Æ’\\Puzzles\\");
    jfc.setDialogTitle("Choose file to import.");
    int userSelection = jfc.showOpenDialog(frame);
    if (userSelection == JFileChooser.APPROVE_OPTION) {
      File selectedFile = jfc.getSelectedFile();
      try {
        Scanner scPuzzle = new Scanner(selectedFile);
        while (scPuzzle.hasNextLine()) {
          String sPuzzle = scPuzzle.nextLine();
          if (sPuzzle.startsWith("File Type:")) {
            if (!(sPuzzle.equals("File Type: Puzzle_File"))) {
              LogContext.with(Import_Legacy_Action.class, null, null).error("Not a legacy puzzle.");
              return;
            }
          } else if (sPuzzle.startsWith("Name:")) {
            SPropertyOperations.assign(puzzle, PROPS.name$MnvL, sPuzzle.substring("Name: ".length()));
            event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(() -> {
              new_model.value = event.getData(MPSCommonDataKeys.CONTEXT_MODEL).getModelRoot().createModel(event.getData(MPSCommonDataKeys.CONTEXT_MODEL).getName() + "." + SPropertyOperations.getString(puzzle, PROPS.name$MnvL).replace(' ', '_'));
              new ModelImports(new_model.value).addUsedLanguage(MetaAdapterFactory.getLanguage(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, "PisP"));
              new ModelImports(new_model.value).copyLanguageEngagedOnGeneration(event.getData(MPSCommonDataKeys.CONTEXT_MODEL));
            });
          } else if (sPuzzle.startsWith("Bag-of-Pieces Name:")) {
            SPropertyOperations.assign(bop, PROPS.name$MnvL, sPuzzle.substring("Bag-of-Pieces Name: ".length()));
            File bopFile = new File(selectedFile.getAbsolutePath() + "/../../Bags of Pieces/" + SPropertyOperations.getString(bop, PROPS.name$MnvL));
            Scanner scBop = new Scanner(bopFile);
            sPuzzle = scBop.nextLine();
            if (!(sPuzzle.equals("File Type: BagOfPieces_File"))) {
              LogContext.with(Import_Legacy_Action.class, null, null).info("Related Bag of Pieces not found.");
            } else {
              SPropertyOperations.assign(bop, PROPS.name$MnvL, scBop.nextLine().substring("Name: ".length()));
              scBop.nextLine();
              SEnumerationLiteral lattice;
              switch (scBop.nextLine()) {
                case "Lattice Name: Cubic Lattice":
                  lattice = SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37af372fL, "PisP.structure.LatticeEnum"), 0x2e8846265a55f50eL, "CubicLattice3D");
                  break;
                case "Lattice Name: Rhombohedral Lattice":
                  lattice = SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37af372fL, "PisP.structure.LatticeEnum"), 0x2cd4be37af5e88L, "FCCLattice");
                  break;
                default:
                  LogContext.with(Import_Legacy_Action.class, null, null).info("Unknown lattice");
                  return;
              }
              while (scBop.hasNextLine()) {
                String sBop = scBop.nextLine();
                if (sBop.startsWith("Class")) {
                  String[] classLine = sBop.split(":")[1].split(">");
                  String locationString = classLine[0];
                  final SNode piece = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L, "PisP.structure.Piece"));
                  SNode pieceRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, "PisP.structure.PieceReference"));
                  String cooString = "";
                  SNode loc = null;
                  for (int i = 0; i < classLine[0].length(); i++) {
                    char c = locationString.charAt(i);
                    if (c == '(') {
                      loc = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, "PisP.structure.Location"));
                      cooString = "";
                    } else if (c == ')') {
                      SNode coo = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, "PisP.structure.Coordinate"));
                      SPropertyOperations.assign(coo, PROPS.coordinate$hw$O, Integer.parseInt(cooString));
                      ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).addElement(coo);
                      ListSequence.fromList(SLinkOperations.getChildren(piece, LINKS.locations$ChQi)).addElement(loc);
                    } else if (c == ',') {
                      SNode coo = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, "PisP.structure.Coordinate"));
                      SPropertyOperations.assign(coo, PROPS.coordinate$hw$O, Integer.parseInt(cooString));
                      ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).addElement(coo);
                      cooString = "";
                    } else if (c == ' ') {
                    } else {
                      cooString += c;
                    }
                  }
                  SPropertyOperations.assign(piece, PROPS.name$MnvL, trim_endkxl_a0a2a7a1a4a0e0b1a1a1a21a5(classLine[1]).split("\\s+")[2]);
                  SPropertyOperations.assignEnum(piece, PROPS.lattice$e_Fj, lattice);
                  event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(() -> SModelOperations.addRootNode(new_model.value, piece));
                  SLinkOperations.setTarget(pieceRef, LINKS.piece$jZYy, piece);
                  SPropertyOperations.assign(pieceRef, PROPS.multiplicity$Equw, Integer.parseInt(trim_endkxl_a0a0c0l0b0e0a4a1b0b0b0m0f(classLine[1]).split("\\s+")[1]));
                  ListSequence.fromList(SLinkOperations.getChildren(bop, LINKS.pieces$2_Tv)).addElement(pieceRef);
                } else {
                }
              }
            }
            scBop.close();
          } else if (sPuzzle.startsWith("Shape Name: ")) {
            SPropertyOperations.assign(shape, PROPS.name$MnvL, sPuzzle.substring("Shape Name: ".length(), sPuzzle.length()));
            File shapeFile = new File(selectedFile.getAbsolutePath() + "/../../Shapes/" + SPropertyOperations.getString(shape, PROPS.name$MnvL));
            Scanner scShape = new Scanner(shapeFile);
            sPuzzle = scShape.nextLine();
            if (!(sPuzzle.equals("File Type: Shape_File"))) {
              LogContext.with(Import_Legacy_Action.class, null, null).info("Related Shape not found.");
            } else {
              SPropertyOperations.assign(shape, PROPS.name$MnvL, scShape.nextLine().substring("Name: ".length()));
              scShape.nextLine();
              SEnumerationLiteral lattice;
              switch (scShape.nextLine()) {
                case "Lattice Name: Cubic Lattice":
                  lattice = SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37af372fL, "PisP.structure.LatticeEnum"), 0x2e8846265a55f50eL, "CubicLattice3D");
                  break;
                case "Lattice Name: Rhombohedral Lattice":
                  lattice = SEnumOperations.getMember(MetaAdapterFactory.getEnumeration(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37af372fL, "PisP.structure.LatticeEnum"), 0x2cd4be37af5e88L, "FCCLattice");
                  break;
                default:
                  LogContext.with(Import_Legacy_Action.class, null, null).info("Unknown lattice");
                  return;
              }
              while (scShape.hasNextLine()) {
                String line = scShape.nextLine();
                if (line.startsWith("(")) {
                  SNode loc = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, "PisP.structure.Location"));
                  String[] splitCoords = line.substring(1, line.length() - 1).split(",");
                  for (String c : splitCoords) {
                    SNode coo = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, "PisP.structure.Coordinate"));
                    SPropertyOperations.assign(coo, PROPS.coordinate$hw$O, Integer.parseInt(c));
                    ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).addElement(coo);
                  }
                  ListSequence.fromList(SLinkOperations.getChildren(shape, LINKS.locations$c$Xv)).addElement(loc);
                }
              }
              SPropertyOperations.assignEnum(shape, PROPS.lattice$dZUe, lattice);
            }
            scShape.close();
          } else {
          }
        }
        scPuzzle.close();
      } catch (IOException ioe) {
        LogContext.with(Import_Legacy_Action.class, null, null).error(ioe);
      }
      event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().executeCommand(() -> {
        SModelOperations.addRootNode(new_model.value, puzzle);
        SModelOperations.addRootNode(new_model.value, bop);
        SModelOperations.addRootNode(new_model.value, shape);
      });
    }
    frame.dispose();
  }
  public static String trim_endkxl_a0a2a7a1a4a0e0b1a1a1a21a5(String str) {
    return (str == null ? null : str.trim());
  }
  public static String trim_endkxl_a0a0c0l0b0e0a4a1b0b0b0m0f(String str) {
    return (str == null ? null : str.trim());
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink shape$f2Vs = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL, 0x2cd4be37adec52L, "shape");
    /*package*/ static final SReferenceLink bagofpieces$Ua4q = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL, 0x2cd4be37adea14L, "bagofpieces");
    /*package*/ static final SContainmentLink coordinates$48xZ = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, 0x2cd4be37aee65fL, "coordinates");
    /*package*/ static final SContainmentLink locations$ChQi = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L, 0x2cd4be37ae0e94L, "locations");
    /*package*/ static final SReferenceLink piece$jZYy = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, 0x2cd4be37ae080fL, "piece");
    /*package*/ static final SContainmentLink pieces$2_Tv = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L, 0x2cd4be37aed1a3L, "pieces");
    /*package*/ static final SContainmentLink locations$c$Xv = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L, 0x2cd4be37adcd2bL, "locations");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty coordinate$hw$O = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, 0x2cd4be37adde2aL, "coordinate");
    /*package*/ static final SProperty lattice$e_Fj = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L, 0x2cd4be37af4f8fL, "lattice");
    /*package*/ static final SProperty multiplicity$Equw = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, 0x2cd4be37ae0492L, "multiplicity");
    /*package*/ static final SProperty lattice$dZUe = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L, 0x2cd4be37af59bfL, "lattice");
  }
}
