package PisP.embeddings.generator.templates;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import PisP.embeddings.generator.util.AbstractPuzzleMaker;
import PisP.embeddings.generator.util.AbstractPuzzle;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.MapNodeQuery;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean rule_Condition_3_0(final BaseMappingRuleContext _context) {
    SNode sibling = (SNode) SNodeOperations.getNextSibling(_context.getNode());
    while (true) {
      boolean copy = true;
      for (final SNode aspect : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.aspects$q3wJ))) {
        if (!(ListSequence.fromList(SLinkOperations.getChildren(sibling, LINKS.aspects$q3wJ)).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(it, PROPS.name$MnvL).equals(SPropertyOperations.getString(aspect, PROPS.name$MnvL));
          }
        }))) {
          copy = false;
        }
      }
      if (copy) {
        return true;
      }
      if (!(SNodeOperations.getNextSibling(sibling) != null)) {
        break;
      }
      sibling = (SNode) SNodeOperations.getNextSibling(sibling);
    }
    return false;
  }
  public static SNode mapSrcMacro_map_1_0(final MapSrcMacroContext _context) {
    SNode ap = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf18355ad2d424a0aL, 0xa78566932d080030L, 0x4eaa6535d7c70685L, "PisP.embeddings.structure.AbstractPuzzle"));
    SPropertyOperations.assign(ap, PROPS.name$MnvL, SPropertyOperations.getString(_context.getNode(), PROPS.name$MnvL));
    AbstractPuzzleMaker APM = new AbstractPuzzleMaker(_context);
    AbstractPuzzle apJava = APM.makeAbstractPuzzle(_context.getNode());
    ListSequence.fromList(SLinkOperations.getChildren(ap, LINKS.aspects$bIOZ)).addSequence(ListSequence.fromList(apJava.aspects));
    ListSequence.fromList(SLinkOperations.getChildren(ap, LINKS.embeddings$iT2w)).addSequence(ListSequence.fromList(apJava.embeddings));
    return ap;
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("2729515537033554988", new RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    ReductionRuleCondition query = identity.forTemplateNode(rrcMethods);
    return (query != null ? query : super.getReductionRuleCondition(identity));
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_3_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, MapNodeQuery> mnqMethods = new HashMap<String, MapNodeQuery>();
  {
    mnqMethods.put("5668454362927157598", new MNQ(0));
  }
  @NotNull
  @Override
  public MapNodeQuery getMapNodeQuery(@NotNull QueryKey queryKey) {
    MapNodeQuery query = queryKey.forTemplateNode(mnqMethods);
    return (query != null ? query : super.getMapNodeQuery(queryKey));
  }
  private static class MNQ implements MapNodeQuery {
    private final int methodKey;
    /*package*/ MNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull MapSrcMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.mapSrcMacro_map_1_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink aspects$q3wJ = MetaAdapterFactory.getContainmentLink(0xf18355ad2d424a0aL, 0xa78566932d080030L, 0x4eaa6535d7c8b4ebL, 0x4eaa6535d7c8b814L, "aspects");
    /*package*/ static final SContainmentLink aspects$bIOZ = MetaAdapterFactory.getContainmentLink(0xf18355ad2d424a0aL, 0xa78566932d080030L, 0x4eaa6535d7c70685L, 0x4eaa6535d7c8a9cfL, "aspects");
    /*package*/ static final SContainmentLink embeddings$iT2w = MetaAdapterFactory.getContainmentLink(0xf18355ad2d424a0aL, 0xa78566932d080030L, 0x4eaa6535d7c70685L, 0x4eaa6535d7c8aaa1L, "embeddings");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
