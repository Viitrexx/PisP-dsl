package PisP.embeddings.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractPuzzle;
  private ConceptPresentation props_Aspect;
  private ConceptPresentation props_Embedding;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractPuzzle:
        if (props_AbstractPuzzle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AbstractPuzzle = cpb.create();
        }
        return props_AbstractPuzzle;
      case LanguageConceptSwitch.Aspect:
        if (props_Aspect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Aspect = cpb.create();
        }
        return props_Aspect;
      case LanguageConceptSwitch.Embedding:
        if (props_Embedding == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Embedding");
          props_Embedding = cpb.create();
        }
        return props_Embedding;
    }
    return null;
  }
}
