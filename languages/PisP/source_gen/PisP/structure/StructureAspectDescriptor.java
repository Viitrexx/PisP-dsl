package PisP.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBagOfPieces = createDescriptorForBagOfPieces();
  /*package*/ final ConceptDescriptor myConceptCoordinate = createDescriptorForCoordinate();
  /*package*/ final ConceptDescriptor myConceptLattice = createDescriptorForLattice();
  /*package*/ final ConceptDescriptor myConceptLocation = createDescriptorForLocation();
  /*package*/ final ConceptDescriptor myConceptPiece = createDescriptorForPiece();
  /*package*/ final ConceptDescriptor myConceptPieceReference = createDescriptorForPieceReference();
  /*package*/ final ConceptDescriptor myConceptPuzzle = createDescriptorForPuzzle();
  /*package*/ final ConceptDescriptor myConceptShape = createDescriptorForShape();
  /*package*/ final EnumerationDescriptor myEnumerationLatticeEnum = new EnumerationDescriptor_LatticeEnum();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBagOfPieces, myConceptCoordinate, myConceptLattice, myConceptLocation, myConceptPiece, myConceptPieceReference, myConceptPuzzle, myConceptShape);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BagOfPieces:
        return myConceptBagOfPieces;
      case LanguageConceptSwitch.Coordinate:
        return myConceptCoordinate;
      case LanguageConceptSwitch.Lattice:
        return myConceptLattice;
      case LanguageConceptSwitch.Location:
        return myConceptLocation;
      case LanguageConceptSwitch.Piece:
        return myConceptPiece;
      case LanguageConceptSwitch.PieceReference:
        return myConceptPieceReference;
      case LanguageConceptSwitch.Puzzle:
        return myConceptPuzzle;
      case LanguageConceptSwitch.Shape:
        return myConceptShape;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationLatticeEnum);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBagOfPieces() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "BagOfPieces", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418269233");
    b.version(3);
    b.aggregate("pieces", 0x2cd4be37aed1a3L).target(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL).optional(true).ordered(true).multiple(true).origin("12618812418347427").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCoordinate() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "Coordinate", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L);
    b.class_(false, false, false);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418284135");
    b.version(3);
    b.property("coordinate", 0x2cd4be37adde2aL).type(PrimitiveTypeId.INTEGER).origin("12618812418285098").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLattice() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "Lattice", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adf1b9L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418290105");
    b.version(3);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLocation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "Location", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL);
    b.class_(false, false, false);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418275487");
    b.version(3);
    b.aggregate("coordinates", 0x2cd4be37aee65fL).target(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L).optional(true).ordered(true).multiple(true).origin("12618812418352735").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPiece() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "Piece", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418296553");
    b.version(3);
    b.property("dimensions", 0x2cd4be37ae1723L).type(PrimitiveTypeId.INTEGER).origin("12618812418299683").done();
    b.property("lattice", 0x2cd4be37af4f8fL).type(MetaIdFactory.dataTypeId(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37af372fL)).origin("12618812418379663").done();
    b.aggregate("locations", 0x2cd4be37ae0e94L).target(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL).optional(true).ordered(true).multiple(true).origin("12618812418297492").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPieceReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "PieceReference", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL);
    b.class_(false, false, false);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418294461");
    b.version(3);
    b.property("multiplicity", 0x2cd4be37ae0492L).type(PrimitiveTypeId.INTEGER).origin("12618812418294930").done();
    b.associate("piece", 0x2cd4be37ae080fL).target(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L).optional(false).origin("12618812418295823").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPuzzle() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "Puzzle", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418160283");
    b.version(3);
    b.associate("bagofpieces", 0x2cd4be37adea14L).target(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L).optional(false).origin("12618812418288148").done();
    b.associate("shape", 0x2cd4be37adec52L).target(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L).optional(false).origin("12618812418288722").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForShape() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("PisP", "Shape", 0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:c0c44ecb-4459-46b9-b227-3b76e96cebff(PisP.structure)/12618812418270434");
    b.version(3);
    b.property("lattice", 0x2cd4be37af59bfL).type(MetaIdFactory.dataTypeId(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37af372fL)).origin("12618812418382271").done();
    b.aggregate("locations", 0x2cd4be37adcd2bL).target(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL).optional(true).ordered(true).multiple(true).origin("12618812418280747").done();
    return b.create();
  }
}
