package PisP.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class repeatLocationsShape_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public repeatLocationsShape_NonTypesystemRule() {
  }
  public void applyRule(final SNode shape, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    //  Code duplicated from repeatLocationsPiece
    MultiLinkedList root = new MultiLinkedList<Integer>(null);
    for (SNode location : ListSequence.fromList(SLinkOperations.getChildren(shape, LINKS.locations$c$Xv))) {
      MultiLinkedList current = root;
      Boolean madeNew = false;
      for (SNode coordinate : ListSequence.fromList(SLinkOperations.getChildren(location, LINKS.coordinates$48xZ))) {
        int c = SPropertyOperations.getInteger(coordinate, PROPS.coordinate$hw$O);
        if (current.hasChildWithData(c)) {
          current = current.getChildWithData(c);
        } else {
          madeNew = true;
          current.addChild(c);
          current = current.getChildWithData(c);
        }
      }
      if (!(madeNew)) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(location, "Duplicate location.", "r:bc41e529-dea7-4ee8-b55b-85ab02ac5dbd(PisP.typesystem)", "7684354715568035746", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Shape$CN;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty coordinate$hw$O = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, 0x2cd4be37adde2aL, "coordinate");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink coordinates$48xZ = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, 0x2cd4be37aee65fL, "coordinates");
    /*package*/ static final SContainmentLink locations$c$Xv = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L, 0x2cd4be37adcd2bL, "locations");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Shape$CN = MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L, "PisP.structure.Shape");
  }
}
