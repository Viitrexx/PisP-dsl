package PisP.typesystem;

/*Generated by MPS */

import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;

/**
 * It's like a tree, but not really because you don't guarantee it
 * Used to check duplicate locations by building a tree of the coordinates
 * 
 * @param <T> Type of data.
 */
public class MultiLinkedList<T> {
  private T data = null;
  private List<MultiLinkedList> children = new ArrayList<>();
  private MultiLinkedList parent = null;

  public MultiLinkedList(T type) {
    this.data = type;
  }

  public void addChild(MultiLinkedList child) {
    child.setParent(this);
    this.children.add(child);
  }

  public void addChild(T data) {
    MultiLinkedList<T> newChild = new MultiLinkedList<>(data);
    this.addChild(newChild);
  }

  public void setParent(MultiLinkedList parent) {
    this.parent = parent;
  }

  public MultiLinkedList getParent() {
    return parent;
  }

  public Boolean hasChildWithData(final T data) {
    final Wrappers._T<Boolean> result = new Wrappers._T<Boolean>(false);
    children.forEach((MultiLinkedList child) -> result.value |= child.data == data);
    return result.value;
  }

  public MultiLinkedList getChildWithData(final T data) {
    final Wrappers._T<MultiLinkedList> result = new Wrappers._T<MultiLinkedList>(null);
    children.forEach((MultiLinkedList child) -> {
      if (child.data == data) {
        result.value = child;
      }
    });
    return result.value;
  }
}
