package PisP.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class repeatPieces_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public repeatPieces_NonTypesystemRule() {
  }
  public void applyRule(final SNode bagOfPieces, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    Set<SNode> setOfPieces = new HashSet<>();
    for (SNode pieceRef : ListSequence.fromList(SLinkOperations.getChildren(bagOfPieces, LINKS.pieces$2_Tv))) {
      if (pieceRef != null & SLinkOperations.getTarget(pieceRef, LINKS.piece$jZYy) != null) {
        if (SetSequence.fromSet(setOfPieces).contains(SLinkOperations.getTarget(pieceRef, LINKS.piece$jZYy))) {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(pieceRef, "Duplicate piece.", "r:bc41e529-dea7-4ee8-b55b-85ab02ac5dbd(PisP.typesystem)", "7684354715568619100", null, errorTarget);
          }
        } else {
          SetSequence.fromSet(setOfPieces).addElement(SLinkOperations.getTarget(pieceRef, LINKS.piece$jZYy));
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BagOfPieces$L0;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink piece$jZYy = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, 0x2cd4be37ae080fL, "piece");
    /*package*/ static final SContainmentLink pieces$2_Tv = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L, 0x2cd4be37aed1a3L, "pieces");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BagOfPieces$L0 = MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L, "PisP.structure.BagOfPieces");
  }
}
