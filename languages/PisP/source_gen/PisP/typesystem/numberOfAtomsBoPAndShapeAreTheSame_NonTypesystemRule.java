package PisP.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class numberOfAtomsBoPAndShapeAreTheSame_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public numberOfAtomsBoPAndShapeAreTheSame_NonTypesystemRule() {
  }
  public void applyRule(final SNode puzzle, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    int shapeAtoms = 0;
    if (SLinkOperations.getTarget(puzzle, LINKS.shape$f2Vs) != null) {
      shapeAtoms = SLinkOperations.getChildren(SLinkOperations.getTarget(puzzle, LINKS.shape$f2Vs), LINKS.locations$c$Xv).size();
    }
    int bopAtoms = 0;
    if (SLinkOperations.getTarget(puzzle, LINKS.bagofpieces$Ua4q) != null) {
      for (SNode pieceRef : ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(puzzle, LINKS.bagofpieces$Ua4q), LINKS.pieces$2_Tv))) {
        bopAtoms += SPropertyOperations.getInteger(pieceRef, PROPS.multiplicity$Equw) * SLinkOperations.getChildren(SLinkOperations.getTarget(pieceRef, LINKS.piece$jZYy), LINKS.locations$ChQi).size();
      }
    }
    if (bopAtoms != shapeAtoms) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportWarning(puzzle, "Filling " + shapeAtoms + " holes with " + bopAtoms + " atoms.", "r:bc41e529-dea7-4ee8-b55b-85ab02ac5dbd(PisP.typesystem)", "7684354715560425143", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Puzzle$V;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink shape$f2Vs = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL, 0x2cd4be37adec52L, "shape");
    /*package*/ static final SContainmentLink locations$c$Xv = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada4e2L, 0x2cd4be37adcd2bL, "locations");
    /*package*/ static final SReferenceLink piece$jZYy = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, 0x2cd4be37ae080fL, "piece");
    /*package*/ static final SContainmentLink locations$ChQi = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L, 0x2cd4be37ae0e94L, "locations");
    /*package*/ static final SReferenceLink bagofpieces$Ua4q = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL, 0x2cd4be37adea14L, "bagofpieces");
    /*package*/ static final SContainmentLink pieces$2_Tv = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L, 0x2cd4be37aed1a3L, "pieces");
  }

  private static final class PROPS {
    /*package*/ static final SProperty multiplicity$Equw = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, 0x2cd4be37ae0492L, "multiplicity");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Puzzle$V = MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37abf69bL, "PisP.structure.Puzzle");
  }
}
