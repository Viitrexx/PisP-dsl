package PisP.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.AbstractIntentionDescriptor;
import jetbrains.mps.openapi.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import jetbrains.mps.openapi.intentions.Kind;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.AbstractIntentionExecutable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.references.BLOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.openapi.intentions.IntentionDescriptor;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;

public final class mergeDuplicatePieces_Intention extends AbstractIntentionDescriptor implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;

  public mergeDuplicatePieces_Intention() {
    super(Kind.NORMAL, false, new SNodePointer("r:364b5764-cd77-46be-a001-da25771178a9(PisP.intentions)", "7684354715571202873"));
  }

  @Override
  public String getPresentation() {
    return "mergeDuplicatePieces";
  }

  @Override
  public boolean isSurroundWith() {
    return false;
  }

  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends AbstractIntentionExecutable {
    public IntentionImplementation() {
    }

    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Merge duplicate piece.";
    }

    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      // Add own multiplicity to first one and delete self
      SNode firstMatch = ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(node, CONCEPTS.BagOfPieces$L0, false, false), LINKS.pieces$2_Tv)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, LINKS.piece$jZYy) == SLinkOperations.getTarget(node, LINKS.piece$jZYy);
        }
      });
      BLOperations.plusAssign(SPropertyOperations.intPropRef(firstMatch, PROPS.multiplicity$Equw), SPropertyOperations.getInteger(node, PROPS.multiplicity$Equw));
      SNodeOperations.deleteNode(node);
    }

    @Override
    public boolean isApplicable(final SNode node, final EditorContext editorContext) {
      if (!(isApplicableToNode(node, editorContext))) {
        return false;
      }
      return true;
    }

    private boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
      if (editorContext.getSelectedNode() != node) {
        return false;
      }
      Map<SNode, Integer> pieceCount = new HashMap<>();
      for (SNode pieceRef : ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(node, CONCEPTS.BagOfPieces$L0, false, false), LINKS.pieces$2_Tv))) {
        pieceCount.merge(SLinkOperations.getTarget(pieceRef, LINKS.piece$jZYy), 1, (Integer a, Integer b) -> a + b);
      }
      // Only show if piece is duplicate
      // AND the piece is not the first one
      if (pieceCount.get(SLinkOperations.getTarget(node, LINKS.piece$jZYy)) > 1 && ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(node, CONCEPTS.BagOfPieces$L0, false, false), LINKS.pieces$2_Tv)).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SLinkOperations.getTarget(it, LINKS.piece$jZYy) == SLinkOperations.getTarget(node, LINKS.piece$jZYy);
        }
      }) != node) {
        return true;
      }
      return false;
    }


    @Override
    public IntentionDescriptor getDescriptor() {
      return mergeDuplicatePieces_Intention.this;
    }

  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BagOfPieces$L0 = MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L, "PisP.structure.BagOfPieces");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink pieces$2_Tv = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ada031L, 0x2cd4be37aed1a3L, "pieces");
    /*package*/ static final SReferenceLink piece$jZYy = MetaAdapterFactory.getReferenceLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, 0x2cd4be37ae080fL, "piece");
  }

  private static final class PROPS {
    /*package*/ static final SProperty multiplicity$Equw = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae02bdL, 0x2cd4be37ae0492L, "multiplicity");
  }
}
