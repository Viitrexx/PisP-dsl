package PisP.editor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Color;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class PieceViewer2DCubic extends PieceViewer2D {
  public PieceViewer2DCubic(SNode node, EditorContext editorContext) {
    super(node, editorContext);
  }

  protected void initMouse() {
    super.initMouse();

    this.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent me) {
        if (me.getButton() == me.BUTTON1) {
          SNode newLocation = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, "PisP.structure.Location"));
          SNode coordX = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, "PisP.structure.Coordinate"));
          SNode coordY = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, "PisP.structure.Coordinate"));
          SPropertyOperations.assign(coordX, PROPS.coordinate$hw$O, (me.getX() - offsetX >= 0 ? (me.getX() - offsetX) / ATOM_SIZE : (me.getX() - offsetX) / ATOM_SIZE - 1));
          SPropertyOperations.assign(coordY, PROPS.coordinate$hw$O, (me.getY() - offsetY >= 0 ? (me.getY() - offsetY) / ATOM_SIZE : (me.getY() - offsetY) / ATOM_SIZE - 1));
          ListSequence.fromList(SLinkOperations.getChildren(newLocation, LINKS.coordinates$48xZ)).addElement(coordX);
          ListSequence.fromList(SLinkOperations.getChildren(newLocation, LINKS.coordinates$48xZ)).addElement(coordY);
          handleLocation(newLocation);
        }
      }
    });
  }

  public void paintComponent(Graphics g) {
    super.paintComponent(g);
    final Graphics2D g2 = ((Graphics2D) g);
    editorContext.getRepository().getModelAccess().runReadAction(() -> {
      for (SNode loc : ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.locations$ChQi))) {
        if (ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).count() >= 2) {
          int x = (SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).getElement(0), PROPS.coordinate$hw$O)) * ATOM_SIZE + offsetX;
          int y = (SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).getElement(1), PROPS.coordinate$hw$O)) * ATOM_SIZE + offsetY;
          g2.setColor(Color.LIGHT_GRAY);
          g2.fillRect(x, y, ATOM_SIZE, ATOM_SIZE);
          g2.setColor(Color.DARK_GRAY);
          g2.drawRect(x, y, ATOM_SIZE, ATOM_SIZE);
          // I'm sure there's a way to make it red if you have a certain location selected in the editor
        }
      }
    });
  }

  private static final class PROPS {
    /*package*/ static final SProperty coordinate$hw$O = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, 0x2cd4be37adde2aL, "coordinate");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink coordinates$48xZ = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, 0x2cd4be37aee65fL, "coordinates");
    /*package*/ static final SContainmentLink locations$ChQi = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L, 0x2cd4be37ae0e94L, "locations");
  }
}
