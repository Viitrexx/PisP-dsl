package PisP.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

/*package*/ class PieceViewer_ComponentBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public PieceViewer_ComponentBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createJComponent_0();
  }

  private EditorCell createJComponent_0() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_ujvark_a0(), "JComponent_ujvark_a");
    editorCell.setCellId("JComponent_ujvark_a_0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_ujvark_a0() {
    final int ATOM_SIZE = 50;
    final int PANEL_SIZE = 7;

    JPanel panel = new JPanel() {
      public Dimension getPreferredSize() {
        return new Dimension(PANEL_SIZE * ATOM_SIZE, PANEL_SIZE * ATOM_SIZE);
      }

      public void paintComponent(Graphics g) {
        super.paintComponent(g);
        final Graphics2D g2 = ((Graphics2D) g);
        getEditorContext().getRepository().getModelAccess().runReadAction(() -> {
          for (SNode loc : ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.locations$ChQi))) {
            // TODO: improve so it can plot 3D projections
            //  and the cubes aren't off-screen
            //  and FCC lattice/circles
            if (ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).count() >= 2) {
              int x = (SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).getElement(0), PROPS.coordinate$hw$O) + PANEL_SIZE / 2) * ATOM_SIZE;
              int y = (SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(loc, LINKS.coordinates$48xZ)).getElement(1), PROPS.coordinate$hw$O) + PANEL_SIZE / 2) * ATOM_SIZE;
              g2.setColor(Color.LIGHT_GRAY);
              g2.fillRect(x, y, ATOM_SIZE, ATOM_SIZE);
              g2.setColor(Color.DARK_GRAY);
              g2.drawRect(x, y, ATOM_SIZE, ATOM_SIZE);
            }
          }
        });
      }
    };
    panel.setBackground(Color.DARK_GRAY);
    panel.addMouseListener(new MouseAdapter() {
      public void mousePressed(final MouseEvent me) {
        getEditorContext().getRepository().getModelAccess().runWriteAction(() -> {
          SNode newLocation = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, "PisP.structure.Location"));
          final SNode coordX = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, "PisP.structure.Coordinate"));
          final SNode coordY = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, "PisP.structure.Coordinate"));
          SPropertyOperations.assign(coordX, PROPS.coordinate$hw$O, me.getX() / ATOM_SIZE - PANEL_SIZE / 2);
          SPropertyOperations.assign(coordY, PROPS.coordinate$hw$O, me.getY() / ATOM_SIZE - PANEL_SIZE / 2);
          // If the atom already exists, delete it
          if (ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.locations$ChQi)).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(0), PROPS.coordinate$hw$O) == SPropertyOperations.getInteger(coordX, PROPS.coordinate$hw$O) && SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(1), PROPS.coordinate$hw$O) == SPropertyOperations.getInteger(coordY, PROPS.coordinate$hw$O);
            }
          })) {
            getEditorContext().getRepository().getModelAccess().executeCommandInEDT(new Runnable() {
              @Override
              public void run() {
                SNodeOperations.deleteNode(ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.locations$ChQi)).findFirst(new IWhereFilter<SNode>() {
                  public boolean accept(SNode it) {
                    return SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(0), PROPS.coordinate$hw$O) == SPropertyOperations.getInteger(coordX, PROPS.coordinate$hw$O) && SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(1), PROPS.coordinate$hw$O) == SPropertyOperations.getInteger(coordY, PROPS.coordinate$hw$O);
                  }
                }));
              }
            });
          } else {
            // If the atom does not exist, add it
            ListSequence.fromList(SLinkOperations.getChildren(newLocation, LINKS.coordinates$48xZ)).addElement(coordX);
            ListSequence.fromList(SLinkOperations.getChildren(newLocation, LINKS.coordinates$48xZ)).addElement(coordY);
            getEditorContext().getRepository().getModelAccess().executeCommandInEDT(new Runnable() {
              @Override
              public void run() {
                ListSequence.fromList(SLinkOperations.getChildren(myNode, LINKS.locations$ChQi)).addElement(newLocation);
              }
            });
          }
        });
      }
    });
    return panel;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink coordinates$48xZ = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, 0x2cd4be37aee65fL, "coordinates");
    /*package*/ static final SContainmentLink locations$ChQi = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L, 0x2cd4be37ae0e94L, "locations");
  }

  private static final class PROPS {
    /*package*/ static final SProperty coordinate$hw$O = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, 0x2cd4be37adde2aL, "coordinate");
  }
}
