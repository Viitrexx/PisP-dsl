package PisP.editor;

/*Generated by MPS */

import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import jetbrains.mps.baseLanguage.logging.rt.LogContext;
import java.awt.event.MouseMotionAdapter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.awt.Dimension;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public abstract class PieceViewer2D extends JPanel {
  public final int ATOM_SIZE = 50;
  public final int PANEL_SIZE = 7;
  public SNode node;
  public EditorContext editorContext;
  public int offsetX;
  public int offsetY;
  private int anchorX;
  private int anchorY;
  private int anchorOffsetX;
  private int anchorOffsetY;
  private Boolean but3drag = false;

  public PieceViewer2D(SNode node, EditorContext editorContext) {
    this.node = node;
    this.editorContext = editorContext;
    this.offsetX = ATOM_SIZE * (PANEL_SIZE / 2);
    this.offsetY = ATOM_SIZE * (PANEL_SIZE / 2);

    this.setBackground(Color.DARK_GRAY);
    initMouse();
  }

  public void initMouse() {
    this.addMouseListener(new MouseAdapter() {
      public void mousePressed(MouseEvent me) {
        if (me.getButton() == MouseEvent.BUTTON3) {
          LogContext.with(PieceViewer2D.class, null, null).debug("button3 press");
          anchorX = me.getX();
          anchorY = me.getY();
          anchorOffsetX = offsetX;
          anchorOffsetY = offsetY;
          but3drag = true;
        }
      }

      public void mouseReleased(MouseEvent me) {
        if (me.getButton() == MouseEvent.BUTTON3) {
          but3drag = false;
        }
      }
    });

    this.addMouseMotionListener(new MouseMotionAdapter() {
      public void mouseDragged(MouseEvent me) {
        if (but3drag) {
          offsetX = anchorOffsetX - anchorX + me.getX();
          offsetY = anchorOffsetY - anchorY + me.getY();
          repaint();
        }
      }
    });
  }

  public void handleLocation(final SNode location) {
    editorContext.getRepository().getModelAccess().runWriteAction(() -> {
      final int x = SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(location, LINKS.coordinates$48xZ)).getElement(0), PROPS.coordinate$hw$O);
      final int y = SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(location, LINKS.coordinates$48xZ)).getElement(1), PROPS.coordinate$hw$O);
      // If the atom already exists, delete it
      if (ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.locations$ChQi)).any(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(0), PROPS.coordinate$hw$O) == x && SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(1), PROPS.coordinate$hw$O) == y;
        }
      })) {
        editorContext.getRepository().getModelAccess().executeCommandInEDT(new Runnable() {
          /**
           * While delete is deprecated, it works and I don't know a better way to do it.
           */
          @Override
          public void run() {
            SNodeOperations.deleteNode(ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.locations$ChQi)).findFirst(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(0), PROPS.coordinate$hw$O) == x && SPropertyOperations.getInteger(ListSequence.fromList(SLinkOperations.getChildren(it, LINKS.coordinates$48xZ)).getElement(1), PROPS.coordinate$hw$O) == y;
              }
            }));
          }
        });
      } else {
        // If the atom does not exist, add it
        editorContext.getRepository().getModelAccess().executeCommandInEDT(new Runnable() {
          @Override
          public void run() {
            ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.locations$ChQi)).addElement(location);
          }
        });
      }
    });
  }

  public Dimension getPreferredSize() {
    return new Dimension(PANEL_SIZE * ATOM_SIZE, PANEL_SIZE * ATOM_SIZE);
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink coordinates$48xZ = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adb89fL, 0x2cd4be37aee65fL, "coordinates");
    /*package*/ static final SContainmentLink locations$ChQi = MetaAdapterFactory.getContainmentLink(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37ae0ae9L, 0x2cd4be37ae0e94L, "locations");
  }

  private static final class PROPS {
    /*package*/ static final SProperty coordinate$hw$O = MetaAdapterFactory.getProperty(0x9ea5405ccd504139L, 0x8b0811b78b688cf5L, 0x2cd4be37adda67L, 0x2cd4be37adde2aL, "coordinate");
  }
}
