package PisP.editor;

/*Generated by MPS */

import javax.swing.JPanel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import javafx.beans.property.DoubleProperty;
import javafx.beans.property.SimpleDoubleProperty;
import org.jetbrains.mps.openapi.model.SNodeChangeListener;
import java.awt.Window;
import javax.swing.SwingUtilities;
import javafx.application.Platform;
import org.jetbrains.mps.openapi.model.SNodeChangeListenerAdapter;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.event.SPropertyChangeEvent;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.Group;
import javafx.scene.shape.Box;
import javafx.scene.paint.PhongMaterial;
import javafx.scene.paint.Color;
import javafx.scene.SceneAntialiasing;
import javafx.scene.Camera;
import javafx.scene.PerspectiveCamera;
import javafx.scene.transform.Rotate;
import javafx.scene.transform.Translate;
import javafx.scene.input.MouseEvent;
import javafx.scene.input.MouseButton;
import java.awt.Dimension;

public class PieceViewer3D extends JPanel {
  private SNode node;
  private EditorContext editorContext;

  private double anchorX;
  private double anchorY;
  private double anchorAngleX = 0;
  private double anchorAngleY = 0;
  private double anchorTransX = 0;
  private double anchorTransY = 0;
  private DoubleProperty angleX = new SimpleDoubleProperty(0);
  private DoubleProperty angleY = new SimpleDoubleProperty(0);
  private DoubleProperty transX = new SimpleDoubleProperty(0);
  private DoubleProperty transY = new SimpleDoubleProperty(0);

  private SNodeChangeListener sncl;

  protected void finalize() throws Throwable {
    editorContext.getModel().removeChangeListener(sncl);
    Window win = SwingUtilities.getWindowAncestor(this);
    win.dispose();
    super.finalize();
  }

  public PieceViewer3D(SNode node, EditorContext editorContext) {
    this.node = node;
    this.editorContext = editorContext;
    Platform.setImplicitExit(false);

    this.sncl = new SNodeChangeListenerAdapter() {
      public void propertyChanged(@NotNull SPropertyChangeEvent p1) {
      }
    };

    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        initAndShowGUI();
      }
    });
  }

  private void initAndShowGUI() {
    final JFXPanel fxPanel = new JFXPanel();
    this.add(fxPanel);
    this.setVisible(true);

    Platform.runLater(new Runnable() {
      @Override
      public void run() {
        initFX(fxPanel);
      }
    });
  }

  private void initFX(JFXPanel fxPanel) {
    Scene scene = createScene();
    fxPanel.setScene(scene);
  }

  private Scene createScene() {
    Group group = new Group();
    Box box = new Box(100, 100, 100);
    box.setMaterial(new PhongMaterial(Color.RED));
    group.getChildren().add(box);
    Scene scene = new Scene(group, 400, 400, true, SceneAntialiasing.BALANCED);
    scene.setFill(Color.DARKGRAY);
    Camera camera = new PerspectiveCamera();
    camera.setNearClip(0.01);
    camera.setFarClip(6000);
    scene.setCamera(camera);
    initMouseControl(group, camera);
    return scene;
  }

  private void initMouseControl(Group group, Camera camera) {
    Rotate xRotate = new Rotate(0, Rotate.X_AXIS);
    Rotate yRotate = new Rotate(0, Rotate.Y_AXIS);
    Translate translate = new Translate(0, 0, 0);
    camera.getTransforms().addAll(xRotate, yRotate, translate);
    xRotate.angleProperty().bind(angleX);
    yRotate.angleProperty().bind(angleY);
    translate.xProperty().bind(transX);
    translate.yProperty().bind(transY);

    group.setOnMousePressed((MouseEvent event) -> {
      anchorX = event.getSceneX();
      anchorY = event.getSceneY();
      anchorAngleX = angleX.get();
      anchorAngleY = angleY.get();
      anchorTransX = transX.get();
      anchorTransY = transY.get();
    });

    group.setOnMouseDragged((MouseEvent event) -> {
      if (event.getButton() == MouseButton.PRIMARY) {
        angleX.set(anchorAngleX - (anchorY - event.getSceneY()));
        angleY.set(anchorAngleY + anchorX - event.getSceneX());
      } else if (event.getButton() == MouseButton.SECONDARY) {
        transX.set(anchorTransX + anchorX - event.getSceneX());
        transY.set(anchorTransY + anchorY - event.getSceneY());
      }
    });
  }

  public Dimension getPreferredDimension() {
    return new Dimension(400, 400);
  }
}
