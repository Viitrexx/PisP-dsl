package PisP.code.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Aspect_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AspectEquality_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AspectsDefinition_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BooleanAnd_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BooleanNot_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new CollectionAssignment_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new CollectionBase_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new CollectionBigUnion_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new CollectionEmpty_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CollectionEquality_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CollectionIntersection_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new CollectionMaker_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new CollectionMembership_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new CollectionMin_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new CollectionMinus_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new CollectionUnion_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new CollectionVariable_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new Embedding_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new EmbeddingsDefinition_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new ForLoop_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new FunctionCall_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new FunctionDeclaration_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new GlobalVariableDeclaration_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new IfStatement_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new InfinityAspect_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new LocalVariableDeclaration_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new PickAspect_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new Program_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new Subset_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new Variable_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new VariableSuccessor_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69a026L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c87db03L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c76f687L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c696b86L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69dc92L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c7e9ffaL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c6a5668L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c6a0479L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c748b6bL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69d333L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69f80cL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c76577fL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c751d56L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c85f94eL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c6a4707L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69edc3L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c75bf4aL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69a43bL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c770788L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c6960eeL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c697826L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c6996fcL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c692a4fL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c693875L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69e892L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c6953efL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c72de6dL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c691a2eL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c69bb05L), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c698badL), MetaIdFactory.conceptId(0xf5b0334b6abe43bdL, 0x8c0e772bb60e3fffL, 0x313e5f10c86061aL)).seal();
}
