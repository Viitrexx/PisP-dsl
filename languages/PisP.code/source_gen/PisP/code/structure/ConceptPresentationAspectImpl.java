package PisP.code.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Aspect;
  private ConceptPresentation props_AspectEquality;
  private ConceptPresentation props_AspectsDefinition;
  private ConceptPresentation props_Boolean;
  private ConceptPresentation props_BooleanAnd;
  private ConceptPresentation props_BooleanNot;
  private ConceptPresentation props_Collection;
  private ConceptPresentation props_CollectionAssignment;
  private ConceptPresentation props_CollectionBase;
  private ConceptPresentation props_CollectionBigUnion;
  private ConceptPresentation props_CollectionEmpty;
  private ConceptPresentation props_CollectionEquality;
  private ConceptPresentation props_CollectionIntersection;
  private ConceptPresentation props_CollectionMaker;
  private ConceptPresentation props_CollectionMembership;
  private ConceptPresentation props_CollectionMin;
  private ConceptPresentation props_CollectionMinus;
  private ConceptPresentation props_CollectionUnion;
  private ConceptPresentation props_CollectionVariable;
  private ConceptPresentation props_Embedding;
  private ConceptPresentation props_EmbeddingsDefinition;
  private ConceptPresentation props_ForLoop;
  private ConceptPresentation props_FunctionCall;
  private ConceptPresentation props_FunctionDeclaration;
  private ConceptPresentation props_GlobalVariableDeclaration;
  private ConceptPresentation props_IfStatement;
  private ConceptPresentation props_InfinityAspect;
  private ConceptPresentation props_LocalVariableDeclaration;
  private ConceptPresentation props_PickAspect;
  private ConceptPresentation props_Program;
  private ConceptPresentation props_Statement;
  private ConceptPresentation props_Subset;
  private ConceptPresentation props_Variable;
  private ConceptPresentation props_VariableSuccessor;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Aspect:
        if (props_Aspect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Aspect = cpb.create();
        }
        return props_Aspect;
      case LanguageConceptSwitch.AspectEquality:
        if (props_AspectEquality == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AspectEquality");
          props_AspectEquality = cpb.create();
        }
        return props_AspectEquality;
      case LanguageConceptSwitch.AspectsDefinition:
        if (props_AspectsDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AspectsDefinition = cpb.create();
        }
        return props_AspectsDefinition;
      case LanguageConceptSwitch.Boolean:
        if (props_Boolean == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Boolean = cpb.create();
        }
        return props_Boolean;
      case LanguageConceptSwitch.BooleanAnd:
        if (props_BooleanAnd == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanAnd");
          props_BooleanAnd = cpb.create();
        }
        return props_BooleanAnd;
      case LanguageConceptSwitch.BooleanNot:
        if (props_BooleanNot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BooleanNot");
          props_BooleanNot = cpb.create();
        }
        return props_BooleanNot;
      case LanguageConceptSwitch.Collection:
        if (props_Collection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Collection = cpb.create();
        }
        return props_Collection;
      case LanguageConceptSwitch.CollectionAssignment:
        if (props_CollectionAssignment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionAssignment");
          props_CollectionAssignment = cpb.create();
        }
        return props_CollectionAssignment;
      case LanguageConceptSwitch.CollectionBase:
        if (props_CollectionBase == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CollectionBase = cpb.create();
        }
        return props_CollectionBase;
      case LanguageConceptSwitch.CollectionBigUnion:
        if (props_CollectionBigUnion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionBigUnion");
          props_CollectionBigUnion = cpb.create();
        }
        return props_CollectionBigUnion;
      case LanguageConceptSwitch.CollectionEmpty:
        if (props_CollectionEmpty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionEmpty");
          props_CollectionEmpty = cpb.create();
        }
        return props_CollectionEmpty;
      case LanguageConceptSwitch.CollectionEquality:
        if (props_CollectionEquality == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionEquality");
          props_CollectionEquality = cpb.create();
        }
        return props_CollectionEquality;
      case LanguageConceptSwitch.CollectionIntersection:
        if (props_CollectionIntersection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionIntersection");
          props_CollectionIntersection = cpb.create();
        }
        return props_CollectionIntersection;
      case LanguageConceptSwitch.CollectionMaker:
        if (props_CollectionMaker == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionMaker");
          props_CollectionMaker = cpb.create();
        }
        return props_CollectionMaker;
      case LanguageConceptSwitch.CollectionMembership:
        if (props_CollectionMembership == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionMembership");
          props_CollectionMembership = cpb.create();
        }
        return props_CollectionMembership;
      case LanguageConceptSwitch.CollectionMin:
        if (props_CollectionMin == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CollectionMin = cpb.create();
        }
        return props_CollectionMin;
      case LanguageConceptSwitch.CollectionMinus:
        if (props_CollectionMinus == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionMinus");
          props_CollectionMinus = cpb.create();
        }
        return props_CollectionMinus;
      case LanguageConceptSwitch.CollectionUnion:
        if (props_CollectionUnion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CollectionUnion");
          props_CollectionUnion = cpb.create();
        }
        return props_CollectionUnion;
      case LanguageConceptSwitch.CollectionVariable:
        if (props_CollectionVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CollectionVariable = cpb.create();
        }
        return props_CollectionVariable;
      case LanguageConceptSwitch.Embedding:
        if (props_Embedding == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Embedding");
          props_Embedding = cpb.create();
        }
        return props_Embedding;
      case LanguageConceptSwitch.EmbeddingsDefinition:
        if (props_EmbeddingsDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EmbeddingsDefinition = cpb.create();
        }
        return props_EmbeddingsDefinition;
      case LanguageConceptSwitch.ForLoop:
        if (props_ForLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ForLoop");
          props_ForLoop = cpb.create();
        }
        return props_ForLoop;
      case LanguageConceptSwitch.FunctionCall:
        if (props_FunctionCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("FunctionCall");
          props_FunctionCall = cpb.create();
        }
        return props_FunctionCall;
      case LanguageConceptSwitch.FunctionDeclaration:
        if (props_FunctionDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FunctionDeclaration = cpb.create();
        }
        return props_FunctionDeclaration;
      case LanguageConceptSwitch.GlobalVariableDeclaration:
        if (props_GlobalVariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GlobalVariableDeclaration");
          props_GlobalVariableDeclaration = cpb.create();
        }
        return props_GlobalVariableDeclaration;
      case LanguageConceptSwitch.IfStatement:
        if (props_IfStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IfStatement");
          props_IfStatement = cpb.create();
        }
        return props_IfStatement;
      case LanguageConceptSwitch.InfinityAspect:
        if (props_InfinityAspect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InfinityAspect = cpb.create();
        }
        return props_InfinityAspect;
      case LanguageConceptSwitch.LocalVariableDeclaration:
        if (props_LocalVariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("LocalVariableDeclaration");
          props_LocalVariableDeclaration = cpb.create();
        }
        return props_LocalVariableDeclaration;
      case LanguageConceptSwitch.PickAspect:
        if (props_PickAspect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PickAspect");
          props_PickAspect = cpb.create();
        }
        return props_PickAspect;
      case LanguageConceptSwitch.Program:
        if (props_Program == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Program = cpb.create();
        }
        return props_Program;
      case LanguageConceptSwitch.Statement:
        if (props_Statement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Statement = cpb.create();
        }
        return props_Statement;
      case LanguageConceptSwitch.Subset:
        if (props_Subset == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Subset");
          props_Subset = cpb.create();
        }
        return props_Subset;
      case LanguageConceptSwitch.Variable:
        if (props_Variable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Variable = cpb.create();
        }
        return props_Variable;
      case LanguageConceptSwitch.VariableSuccessor:
        if (props_VariableSuccessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_VariableSuccessor = cpb.create();
        }
        return props_VariableSuccessor;
    }
    return null;
  }
}
